{"version":3,"sources":["Thought.jsx","utilities.js","ThoughtForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["Thought","props","thought","removeThought","nearTime","className","aria-label","onClick","e","preventDefault","id","text","nextId","generateId","result","ThoughtForm","useState","setText","onSubmit","event","expiresAt","Date","now","addThought","type","placeholder","value","onChange","target","App","thoughts","setThoughts","thoughtIdToRemove","prev","filter","item","warning","setWarning","time","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAwBeA,EAtBC,SAACC,GAAW,IAClBC,EAAqCD,EAArCC,QAASC,EAA4BF,EAA5BE,cAA4BF,EAAbG,SAOhC,OACE,qBAAIC,UAAU,UAAd,UACE,wBACEC,aAAW,iBACXD,UAAU,gBACVE,QAVoB,SAACC,GACzBA,EAAEC,iBACFN,EAAcD,EAAQQ,KAKpB,kBAOA,qBAAKL,UAAU,OAAf,SAAuBH,EAAQS,WCfrC,IAAIC,EAAS,EACN,SAASC,IACd,IAAMC,EAASF,EAEf,OADAA,GAAU,EACHE,ECLT,IAgCeC,EAhCK,SAACd,GAAW,IAAD,EACLe,mBAAS,IADJ,mBACtBL,EADsB,KAChBM,EADgB,KAkB7B,OACE,uBAAMZ,UAAU,iBAAiBa,SAZd,SAACC,GACpBA,EAAMV,iBACN,IAAIP,EAAU,CACZQ,GAAIG,IACJF,OACAS,UDdGC,KAAKC,MAAQ,KCgBlBX,GAAQV,EAAMsB,WAAWrB,GACzBe,EAAQ,KAIR,UACE,uBACEO,KAAK,OACLlB,aAAW,uBACXmB,YAAY,uBACZC,MAAOf,EACPgB,SAtBmB,SAACR,GACxBF,EAAQE,EAAMS,OAAOF,UAuBnB,uBAAOF,KAAK,SAASE,MAAM,Y,MCiBlBG,MAzCf,WAAgB,IAAD,EACmBb,mBAAS,IAD5B,mBACNc,EADM,KACIC,EADJ,KAMP5B,EAAgB,SAAC6B,GACrBD,GAAY,SAACE,GACX,OAAOA,EAAKC,QAAO,SAACC,GAAD,OAAUA,EAAKzB,KAAOsB,SARhC,EAYiBhB,mBAAS,IAZ1B,mBAYNoB,EAZM,KAYGC,EAZH,KAcPjC,EAAW,SAACkC,GAChBD,EAAWC,EAAO,SAGpB,OACE,sBAAKjC,UAAU,MAAf,UACE,iCACE,8CAEF,+BAAO+B,IACP,iCACE,cAAC,EAAD,CAAab,WAvBA,SAACrB,GAClB6B,GAAY,SAACE,GAAD,OAAW/B,GAAX,mBAAuB+B,UAuB/B,oBAAI5B,UAAU,WAAd,SACGyB,EAASS,KAAI,SAACrC,GAAD,OACZ,cAAC,EAAD,CAEEA,QAASA,EACTC,cAAeA,EACfC,SAAUA,GAHLF,EAAQQ,gBCvBZ8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5cf82f67.chunk.js","sourcesContent":["import React from 'react';\n\nconst Thought = (props) => {\n  const { thought, removeThought, nearTime } = props;\n\n  const handleRemoveClick = (e) => {\n    e.preventDefault();\n    removeThought(thought.id);\n  };\n\n  return (\n    <li className=\"Thought\">\n      <button\n        aria-label=\"Remove thought\"\n        className=\"remove-button\"\n        onClick={handleRemoveClick}\n      >\n        &times;\n      </button>\n      <div className=\"text\">{thought.text}</div>\n    </li>\n  );\n};\n\nexport default Thought;\n","export function getNewExpirationTime() {\n  return Date.now() + 5 * 1000;\n}\n\nlet nextId = 0;\nexport function generateId() {\n  const result = nextId;\n  nextId += 1;\n  return result;\n}\n","import React, { useState } from 'react';\nimport { generateId, getNewExpirationTime } from './utilities';\n\nconst ThoughtForm = (props) => {\n  const [text, setText] = useState('');\n\n  const handleTextChange = (event) => {\n    setText(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    let thought = {\n      id: generateId(),\n      text,\n      expiresAt: getNewExpirationTime(),\n    };\n    text && props.addThought(thought);\n    setText('');\n  };\n\n  return (\n    <form className=\"AddThoughtForm\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        aria-label=\"What's on your mind?\"\n        placeholder=\"What's on your mind?\"\n        value={text}\n        onChange={handleTextChange}\n      />\n      <input type=\"submit\" value=\"Add\" />\n    </form>\n  );\n};\n\nexport default ThoughtForm;\n","import React, { useState } from 'react';\nimport Thought from './Thought';\nimport ThoughtForm from './ThoughtForm';\nimport { generateId, getNewExpirationTime } from './utilities';\nimport './styles.css';\n\nfunction App() {\n  const [thoughts, setThoughts] = useState([]);\n  const addThought = (thought) => {\n    setThoughts((prev) => [thought, ...prev]);\n  };\n\n  const removeThought = (thoughtIdToRemove) => {\n    setThoughts((prev) => {\n      return prev.filter((item) => item.id !== thoughtIdToRemove);\n    });\n  };\n\n  const [warning, setWarning] = useState('');\n\n  const nearTime = (time) => {\n    setWarning(time + ' sec');\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>To-do List</h1>\n      </header>\n      <span>{warning}</span>\n      <main>\n        <ThoughtForm addThought={addThought} />\n        <ul className=\"thoughts\">\n          {thoughts.map((thought) => (\n            <Thought\n              key={thought.id}\n              thought={thought}\n              removeThought={removeThought}\n              nearTime={nearTime}\n            />\n          ))}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}